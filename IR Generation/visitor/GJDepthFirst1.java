//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst1<R,A> extends GJDepthFirst<R,A>{
   //
   // Auto class visitors--probably don't need to be overridden.
   //
	int temp=6;
	public int newtemp() {
		temp=temp+1;
		return temp-1;
	}
	int label=0;
	public int newlabel() {
		label=label+1;
		return label-1;
	}
	HashMap<String,Integer> allocated = new HashMap<String,Integer>();
	HashMap<String,String> allocatedrev = new HashMap<String,String>();
	LinkedList<String> params = new LinkedList<String>();
	 
	 
	   public class Classmet{
		   HashMap<String,String> var;
		   Classmet(){
			   var = new HashMap<String,String>();
		   }
	   }
       HashMap<String,Classmet> LocalVariables = new HashMap<String,Classmet>();
       
	 
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      GlobalTable = (HashMap<String,ClassTable>) argu;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      System.out.println("MAIN");
      n.f0.accept(this, argu);
      String ClassName=(String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      String S = "main";
      ClassTable c = GlobalTable.get(ClassName);
      MethodTable Mt = c.methods.get(S);
      argu = (A)Mt;
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String ClassName = (String)n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      
      n.f3.accept(this, argu);
      
      argu = (A)ClassName;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      String ClassName = (String)argu;
      ClassTable CT = GlobalTable.get(ClassName);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String MethodName = (String)n.f2.accept(this, argu);
      MethodTable MT = CT.methods.get(MethodName);
      argu=(A)MT;
      HashMap<String,String> parameters= MT.methodvalues.params;
      int numarguments = 1+parameters.size();
      System.out.println(ClassName+"_"+MethodName+" ["+numarguments+"]");
      System.out.println("BEGIN");
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String S = (String)n.f10.accept(this, argu);
      System.out.println("RETURN TEMP "+S);
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      System.out.println("END");
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      MethodTable Mt = (MethodTable)argu;
      String ClassName = Mt.ParentClass;
      String MethodName = Mt.MethodName;
      ClassTable CT = GlobalTable.get(ClassName);
	  HashMap<String,String> classvar=CT.classvar;
	  String S = (String) n.f0.accept(this, argu);
	  String S2 ;
	  if(classvar.get(S)!=null) {
		  String Classadd = Integer.toString(allocated.get(ClassName));
          int p=4;
          Iterator ClassVarIt=classvar.entrySet().iterator();
          while(ClassVarIt.hasNext()) {
        	  Map.Entry mapElement=(Map.Entry)ClassVarIt.next();
        	  String varname = (String)mapElement.getKey();
        	  if(varname==S) {
        		  break;
        	  }
        	  else {
        		  p=p+4;
        	  }
          }
          int newtemp=newtemp();
          S2 = Integer.toString(newtemp);
          System.out.println("HLOAD TEMP "+newtemp+" TEMP "+Classadd+" "+p);
	  }
	  else {
		  String p = ClassName + "_"+MethodName;
		   if(LocalVariables.get(p)==null) {
			   int l = newtemp();
			   String q = Integer.toString(l);
			   Classmet cm = new Classmet();
			   cm.var.put(S,q);
			   LocalVariables.put(p,cm);
			   S2=q;
		   }
		   else {
			   Classmet cm = LocalVariables.get(p);
			   if(cm.var.get(S)==null) {
				   int l = newtemp();
	    		   String q = Integer.toString(l);
				   cm.var.put(S,q);
				   S2=q;
			   }
			   else {
				   
				   S2=cm.var.get(S);
				 
			   }
		   }
	  }
      
      n.f1.accept(this, argu);
      String S1 = (String)n.f2.accept(this, argu);
      System.out.println("MOVE TEMP "+S2+" TEMP "+S1);
      n.f3.accept(this, argu);
      return (R)S2;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
     
      String x = (String)n.f0.accept(this, argu);
      MethodTable Mt = (MethodTable)argu;
      String ClassName = Mt.ParentClass;
      String MethodName = Mt.MethodName;
      ClassTable CT = GlobalTable.get(ClassName);
	  HashMap<String,String> classvar=CT.classvar;
	  String S = (String) n.f0.accept(this, argu);
	  String S2 ;
	  if(classvar.get(S)!=null) {
		  String Classadd = Integer.toString(allocated.get(ClassName));
          int p=4;
          Iterator ClassVarIt=classvar.entrySet().iterator();
          while(ClassVarIt.hasNext()) {
        	  Map.Entry mapElement=(Map.Entry)ClassVarIt.next();
        	  String varname = (String)mapElement.getKey();
        	  if(varname==S) {
        		  break;
        	  }
        	  else {
        		  p=p+4;
        	  }
          }
          int newtemp=newtemp();
          S2 = Integer.toString(newtemp);
          System.out.println("HLOAD TEMP "+newtemp+" TEMP "+Classadd+" "+p);
	  }
	  else {
		  String p = ClassName + "_"+MethodName;
		   if(LocalVariables.get(p)==null) {
			   int l = newtemp();
			   String q = Integer.toString(l);
			   Classmet cm = new Classmet();
			   cm.var.put(S,q);
			   LocalVariables.put(p,cm);
			   S2=q;
		   }
		   else {
			   Classmet cm = LocalVariables.get(p);
			   if(cm.var.get(S)==null) {
				   int l = newtemp();
	    		   String q = Integer.toString(l);
				   cm.var.put(S,q);
				   S2=q;
			   }
			   else {
				   
				   S2=cm.var.get(S);
				 
			   }
		   }
	  }
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String z = (String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      int newtemp0=newtemp();
      int newtemp = newtemp();
      int newtemp1 = newtemp();
      int newtemp2 = newtemp();
      System.out.println("MOVE TEMP "+newtemp0+" TEMP "+z);
      System.out.println("MOVE TEMP "+newtemp+" TEMP "+y);
      System.out.println("HLOAD TEMP "+newtemp1+" TEMP "+S2+" 4");
      System.out.println("MOVE TEMP "+newtemp2+" PLUS TEMP "+newtemp+" 1");
      System.out.println("MOVE TEMP "+newtemp2+" TIMES TEMP "+newtemp2+" 4");
      System.out.println("MOVE TEMP "+newtemp1+" PLUS TEMP "+newtemp2+" TEMP "+newtemp1);
      System.out.println("HSTORE TEMP "+newtemp1+" 0 "+" TEMP "+newtemp0);
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S = (String)n.f2.accept(this, argu);
      int newlabel1 = newlabel();
      System.out.println("CJUMP TEMP "+S+" L"+newlabel1);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("L"+newlabel1);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S = (String)n.f2.accept(this, argu);
      int newlabel1 = newlabel();
      int newlabel2 = newlabel();
      System.out.println("CJUMP TEMP "+S+" L"+newlabel1);
      n.f3.accept(this, argu);
      String S1 = (String) n.f4.accept(this, argu);
      System.out.println("JUMP L"+newlabel2);
      System.out.println("L"+newlabel1);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      System.out.println("L"+newlabel2);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      int newlabel1 = newlabel();
      int newlabel2 = newlabel();
     
      System.out.println("L"+newlabel1);
      String S = (String)n.f2.accept(this, argu);
      System.out.println("CJUMP TEMP "+S+" L"+newlabel2);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      System.out.println("JUMP L"+newlabel1);
      System.out.println("L"+newlabel2);
      System.out.println("NOOP");
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S = (String)n.f2.accept(this, argu);
      System.out.println("PRINT TEMP "+S);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" TIMES "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" PLUS "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" LE "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" NE "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String x =(String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y =(String) n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" PLUS "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" MINUS "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" TIMES "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String x = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String y = (String)n.f2.accept(this, argu);
      String newtemp = Integer.toString(newtemp());
      System.out.println("MOVE TEMP "+newtemp+" DIV "+"TEMP "+x+" TEMP "+y);
      return (R)newtemp;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String i1 = (String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String off = (String)n.f2.accept(this, argu);
      int newtemp = newtemp();
      int newtemp1 = newtemp();
      System.out.println("MOVE TEMP "+newtemp+" PLUS TEMP "+off+" 1");
      System.out.println("MOVE TEMP "+newtemp+" TIMES TEMP "+newtemp+" 4");
      System.out.println("MOVE TEMP "+newtemp+" PLUS TEMP "+newtemp+" "+i1);
      System.out.println("HLOAD TEMP "+newtemp1+" TEMP "+newtemp+" 0");
      n.f3.accept(this, argu);
      return (R)Integer.toString(newtemp1);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String S = (String) n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      int newtemp = newtemp();
      int newtemp1 = newtemp();
      System.out.println("HLOAD TEMP "+newtemp+" S"+0);
      System.out.println("MOVE TEMP "+newtemp1+" TEMP "+newtemp);
      return (R)Integer.toString(newtemp1);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      
      String S = (String)n.f0.accept(this, argu);
      String ClassName = allocatedrev.get(S);
      
      n.f1.accept(this, argu);
      
      String MethodName = (String)n.f2.accept(this, argu);
      ClassTable CT = GlobalTable.get(ClassName);
      int p =0;
      HashMap<String,MethodTable> methods = CT.methods;
      Iterator methodsIt=methods.entrySet().iterator();
      while(methodsIt.hasNext()) {
    	  Map.Entry mapElement=(Map.Entry)methodsIt.next();
    	  String methodname = (String)mapElement.getKey();
    	  if(methodname==MethodName) {
    		  break;
    	  }
    	  else {
    		  p=p+4;
    	  }
      }
      
      int newtemp= newtemp();
      int newtemp1 = newtemp();
      System.out.println("HLOAD "+"TEMP "+newtemp +" TEMP "+S+" "+0);
      System.out.println("HLOAD "+"TEMP "+newtemp1+" TEMP "+newtemp+" "+p);
    
      
      n.f3.accept(this, argu);
     
     
      params = new LinkedList<String>();
      n.f4.accept(this, argu);
      int newtemp2 = newtemp();
      System.out.print("MOVE TEMP "+newtemp2+" CALL TEMP "+newtemp1+" ( TEMP "+S+" ");
      for(int i=0;i<params.size();i++) {
    	  System.out.print("TEMP "+params.get(i)+" ");
      }
      System.out.println(")");
      
    
      n.f5.accept(this, argu);
      
      return (R)Integer.toString(newtemp2);
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      params.add(S);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      params.add(S);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      MethodTable Mt = (MethodTable) argu;
      String MethodName=Mt.MethodName; 
      String S = (String)n.f0.accept(this, argu);
      if(n.f0.which==3) {
    	  String ClassName = Mt.ParentClass;
    	  ClassTable CT = GlobalTable.get(ClassName);
    	  HashMap<String,String> classvar=CT.classvar;
    	  if(classvar.get(S)!=null) {
    		  String Classadd = Integer.toString(allocated.get(ClassName));
              int p=4;
              Iterator ClassVarIt=classvar.entrySet().iterator();
              while(ClassVarIt.hasNext()) {
            	  Map.Entry mapElement=(Map.Entry)ClassVarIt.next();
            	  String varname = (String)mapElement.getKey();
            	  if(varname==S) {
            		  break;
            	  }
            	  else {
            		  p=p+4;
            	  }
              }
              int newtemp=newtemp();
              System.out.println("HLOAD TEMP "+newtemp+" TEMP "+Classadd+" "+p);
              return (R)Integer.toString(newtemp);
    	  }
    	  else {
    		  if(Mt.methodvalues.params.get(S)!=null) {
    			  HashMap<String,String> params = Mt.methodvalues.params;
    			  Iterator paramsIt=params.entrySet().iterator();
    			  int p=1;
    	          while(paramsIt.hasNext()) {
    	        	  Map.Entry mapElement=(Map.Entry)paramsIt.next();
    	        	  String paramname = (String)mapElement.getKey();
    	        	  if(paramname==S) {
    	        		  break;
    	        	  }
    	        	  else {
    	        		  p=p+1;
    	        	  }
    	          }
    	          return (R)Integer.toString(p);
    		  }
    		  else {
    			  String p = ClassName + "_"+MethodName;
    		  
    		   if(LocalVariables.get(p)==null) {
        		   int l = newtemp();
        		   String q = Integer.toString(l);
    			   Classmet cm = new Classmet();
    			   cm.var.put(S,q);
    			   LocalVariables.put(p,cm);
    			   System.out.println("Hiiiiiiii");
    			   return (R)q;
    		   }
    		   else {
    			   Classmet cm = LocalVariables.get(p);
    			   if(cm.var.get(S)==null) {
    				   
    				   int l = newtemp();
    	    		   String q = Integer.toString(l);
    				   cm.var.put(S,q);
    				
    				   return (R)q;
    			   }
    			   else {
    				 
    				 return (R)cm.var.get(S);
    			   }
    		   }
    		  }
      
    	  }
    	}
      return (R)S;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      String newtemp =Integer.toString (newtemp());
      System.out.println("MOVE TEMP "+newtemp+" "+S);
      return (R)newtemp;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      String newtemp =Integer.toString (newtemp());
      System.out.println("MOVE TEMP "+newtemp+" "+1);
      return (R)newtemp;
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      String newtemp =Integer.toString (newtemp());
      System.out.println("MOVE TEMP "+newtemp+" "+0);
      return (R)newtemp;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      MethodTable MT = (MethodTable)argu;
      String ClassName = MT.ParentClass;
      
      if(allocated.get(ClassName)==null) {
    	  ClassTable CT = GlobalTable.get(ClassName);
          int numclassvar = CT.classvar.size();
          int nummethods = CT.methods.size();
          
          int totalfirstlevelsize = (numclassvar+1)*4;
          int totalsecondlevelsize = (nummethods)*4;
          
          //building class table
          int  firstlevelsize = newtemp();
          int firstleveladdress = newtemp();
          
          
          System.out.println("MOVE TEMP "+firstlevelsize+" "+totalfirstlevelsize);
          System.out.println("MOVE TEMP "+firstleveladdress+" HALLOCATE "+"TEMP "+firstlevelsize);
          
          //building methodtable
          int  secondlevelsize = newtemp();
          int secondleveladdress = newtemp();
          System.out.println("MOVE TEMP "+secondlevelsize+" "+totalsecondlevelsize);
          System.out.println("MOVE TEMP "+secondleveladdress+" HALLOCATE "+"TEMP "+secondlevelsize);
          
          //inserting into first level table
          System.out.println("HSTORE TEMP "+firstleveladdress+" "+0+" TEMP "+secondleveladdress);
          
          //inserting into second level table
          HashMap<String,MethodTable> methods = CT.methods;
          int p=0;
          Iterator methodsIt=methods.entrySet().iterator();
          while(methodsIt.hasNext()) {
        	  Map.Entry mapElement=(Map.Entry)methodsIt.next();
        	  String methodname = (String)mapElement.getKey();
        	  int methodaddress = newtemp();
        	  System.out.println("MOVE TEMP "+methodaddress+" "+ClassName+"_"+methodname);
        	  System.out.println("HSTORE TEMP "+secondleveladdress+" "+p+" TEMP "+methodaddress);
        	  p=p+4;
          }
          allocated.put(ClassName,firstleveladdress);
          allocatedrev.put(Integer.toString(firstleveladdress),ClassName);
          return (R)Integer.toString(firstleveladdress);
      }
      
      int S1 = allocated.get(ClassName);
      
      return (R)Integer.toString(S1);
     
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String S = (String)n.f3.accept(this, argu);
      int newtemp = newtemp();
      System.out.println("MOVE TEMP "+newtemp+" PLUS TEMP "+S+" 1");
      System.out.println("MOVE TEMP "+newtemp+" TIMES TEMP "+newtemp+" 4");
      int newtemp2 = newtemp();
      System.out.println("MOVE TEMP "+newtemp2+" HALLOCATE "+newtemp);
      n.f4.accept(this, argu);
      return (R)Integer.toString(newtemp2);
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
     
      //getting class deatails
      String ClassName=(String)n.f1.accept(this, argu);
      
      if(allocated.get(ClassName)==null) {
    	  ClassTable CT = GlobalTable.get(ClassName);
          int numclassvar = CT.classvar.size();
          int nummethods = CT.methods.size();
          
          int totalfirstlevelsize = (numclassvar+1)*4;
          int totalsecondlevelsize = (nummethods)*4;
          
          //building class table
          int  firstlevelsize = newtemp();
          int firstleveladdress = newtemp();
          
          
          System.out.println("MOVE TEMP "+firstlevelsize+" "+totalfirstlevelsize);
          System.out.println("MOVE TEMP "+firstleveladdress+" HALLOCATE "+"TEMP "+firstlevelsize);
          
          //building methodtable
          int  secondlevelsize = newtemp();
          int secondleveladdress = newtemp();
          System.out.println("MOVE TEMP "+secondlevelsize+" "+totalsecondlevelsize);
          System.out.println("MOVE TEMP "+secondleveladdress+" HALLOCATE "+"TEMP "+secondlevelsize);
          
          //inserting into first level table
          System.out.println("HSTORE TEMP "+firstleveladdress+" "+0+" TEMP "+secondleveladdress);
          
          //inserting into second level table
          HashMap<String,MethodTable> methods = CT.methods;
          int p=0;
          Iterator methodsIt=methods.entrySet().iterator();
          while(methodsIt.hasNext()) {
        	  Map.Entry mapElement=(Map.Entry)methodsIt.next();
        	  String methodname = (String)mapElement.getKey();
        	  int methodaddress = newtemp();
        	  System.out.println("MOVE TEMP "+methodaddress+" "+ClassName+"_"+methodname);
        	  System.out.println("HSTORE TEMP "+secondleveladdress+" "+p+" TEMP "+methodaddress);
        	  p=p+4;
          }
          allocated.put(ClassName,firstleveladdress);
          allocatedrev.put(Integer.toString(firstleveladdress),ClassName);
          return (R)Integer.toString(firstleveladdress);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
     int S1 = allocated.get(ClassName);
      
      return (R)Integer.toString(S1);
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      int newtemp = newtemp();
      int newtemp1 = newtemp();
      System.out.println("MOVE TEMP "+newtemp+" 1");
      System.out.println("MOVE TEMP "+newtemp1+" MINUS TEMP "+newtemp+" "+S);
      return (R)S;
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
