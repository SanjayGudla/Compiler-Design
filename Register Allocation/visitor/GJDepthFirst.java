//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> extends GJDepthFirst1<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
   int linenum = 0;
   int presentfunc=0;
   class StmtSignature {
         Set<String> UseSet;
         Set<String> DefSet;
         int directnext;
         int jumpnext;
         Set<String> LiveIn;
         Set<String> LiveOut;
         Set<String> prevLiveIn;
         Set<String> prevLiveOut;
         StmtSignature(){
             UseSet = new HashSet<String>();
             DefSet = new HashSet<String>();
             directnext=0;
             jumpnext=0;
             LiveIn = new HashSet<String>();
             LiveOut = new HashSet<String>();
             prevLiveIn = new HashSet<String>();
             prevLiveOut = new HashSet<String>();
         }
   }
   HashMap<Integer,StmtSignature> GlobalTable = new HashMap<Integer,StmtSignature>();
   Vector<Integer>Endpoints = new Vector<Integer>();
   Vector<String> Function_names = new Vector<String>();
   Vector<Integer> numarguments = new Vector<Integer>();
   HashMap<Integer,Integer> spilledout = new HashMap<Integer,Integer>();
   HashMap<Integer,Integer> maximumarg = new HashMap<Integer,Integer>();
  /* void print (){
       Iterator it = GlobalTable.entrySet().iterator();
       while(it.hasNext()){
            Map.Entry mp = (Map.Entry)it.next();
            StmtSignature a = new StmtSignature();
            a=(StmtSignature)mp.getValue();
            System.out.println(a.jumpnext);
       }
       System.out.println(linenum);
   }*/
   
    int eq(Set<String> s1, Set<String> s2){
        if(s1.containsAll(s2) && s2.containsAll(s1))
            return 1;
        return 0;
     }
   
   int sallocated=0;
   int spilledallocated =0;
  /* StmtSignature l = new StmtSignature();
             l=GlobalTable.get(12);
             Iterator itr = l.UseSet.iterator();
             while(itr.hasNext()){
                 System.out.println(itr.next());
             } */
   
   boolean check (){
      for(int i=1;i<=GlobalTable.size();i++){
         if(eq(GlobalTable.get(i).prevLiveIn,GlobalTable.get(i).LiveIn) + eq( GlobalTable.get(i).prevLiveOut,GlobalTable.get(i).LiveOut ) != 2){
             //System.out.println("     Hi");
             return true;
         }
      }
      return false;
   }
   boolean temp = true;
   void livenessanalysis(){
         while(check()||temp==true){  
               temp=false;
	       for(int i=1;i<=GlobalTable.size();i++){
		   StmtSignature a = new StmtSignature();
		   a = GlobalTable.get(i);
		   a.prevLiveIn = new HashSet<String>(a.LiveIn);
		   a.prevLiveOut = new HashSet<String>(a.LiveOut);
		  
		   Set<String> temp1 = new HashSet<String>(a.LiveOut);
		   temp1.removeAll(a.DefSet);
		   temp1.addAll(a.UseSet);
		   a.LiveIn.addAll(temp1);
		   
		   int b = a.directnext;
		   int c = a.jumpnext;
		   
		   if(b!=0){
		        StmtSignature p = new StmtSignature();
		        p=GlobalTable.get(b);
		            Set<String> temp2 = new HashSet<String>(p.LiveIn);
		            a.LiveOut.addAll(temp2);
		        
		   }
		   
		   if(c!=0){
		        StmtSignature q = new StmtSignature();
		        q=GlobalTable.get(c);
		         
		        Set<String> temp2 = new HashSet<String>(q.LiveIn);
		        a.LiveOut.addAll(temp2);
		        
		   }
		  
	       }
        }
   }
  
  class templiverange{
      int start;
      int end;
      String regallocated ;
      int tempname ;
      boolean isallocatedreg ;
      int stacklocation;
      templiverange(){
          start=0;
          end=0;
          regallocated = "";
          int tempname = -1;
          isallocatedreg = false;
          stacklocation =0;
      } 
  }
  class procliverange{
      int pstart;
      int pend;
      String pname;
      int numarguments;
      HashMap<String,templiverange> totallive = new  HashMap<String,templiverange>();
      procliverange(){
         pstart=0;
         pend=0;
         pname="";
         numarguments=0;
      }
      
  }
  HashMap<Integer,procliverange> Globalliverange = new HashMap<Integer,procliverange>();
  HashMap<Integer,ArrayList<templiverange>> Globrange = new  HashMap<Integer,ArrayList<templiverange>>();
  void findliveranges(){
      int x =0;
      for(int i=0;i<Endpoints.size();i++){
          procliverange p = new procliverange ();
          p.pstart=x+1;
          p.pend = Endpoints.get(i);
          p.pname = Function_names.get(i);
          p.numarguments= numarguments.get(i);
          
          ArrayList<templiverange> z = new ArrayList<templiverange>();
          for(int j=x+1;j<=Endpoints.get(i);j++){
              StmtSignature a =  new StmtSignature();
              a = GlobalTable.get(j);
              Set<String> def = new HashSet<String>(a.DefSet);
              if(def.isEmpty()){
                  continue;
              }
              for(String k : def){
                 if(p.totallive.get(k)==null){
                  templiverange m = new templiverange();
                   m.start=j;
                   m.end=j;
                   m.tempname = Integer.parseInt(k.substring(4));
                  
                  for(int l = Endpoints.get(i);l>=x+1;l--){
                     StmtSignature b =  new StmtSignature();
                     b = GlobalTable.get(l);
                    Set<String> livein = b.LiveIn;
                    if(livein.contains(k)){
                         m.end=l;
                         break;
                    }
                  } 
                  p.totallive.put(k,m);
                  z.add(m);
                  }
              }
          }
          x=Endpoints.get(i);
          Globalliverange.put(i,p);
          Globrange.put(i,z);
      }  
  }
   
  class SortByStart implements Comparator<templiverange>{
       @Override
       public int compare(templiverange d, templiverange d1)
	 {
		   if(d.start>d1.start){
		    	return 1;
		   }
		   else if (d.start<d1.start){
		    	return -1;
		   }
		   return 0;
        }
  }
   
  class SortByEnd implements Comparator<templiverange>{
       @Override
       public int compare(templiverange d, templiverange d1)
	 {
		   if(d.end>d1.end){
		    	return 1;
		   }
		   else if (d.end<d1.end){
		    	return -1;
		   }
		   return 0;
        }
  }
  
   void sortliveranges(){
       Iterator it =Globrange.entrySet().iterator();
       while(it.hasNext()){
            Map.Entry mp = (Map.Entry)it.next();
            ArrayList<templiverange> a = new ArrayList<templiverange>();
            a = (ArrayList<templiverange>)mp.getValue();
            Collections.sort(a,new SortByStart());
       }
   }
   
   
      void expireoldintervals(ArrayList<templiverange> liverange,int i,ArrayList<templiverange> active,ArrayList<String> registerpool){
	 int j;
	 Collections.sort(active,new SortByEnd());
	 for(j=0;j<active.size();j++){
		 if(active.get(j).end>=liverange.get(i).start )
			 return;
		 
		 registerpool.add(active.get(j).regallocated);
		 active.remove(j);
		 j--;
	 }
 }
 
 void spillatinterval(ArrayList<templiverange> liverange,int i,ArrayList<templiverange> active,ArrayList<String> registerpool){
	 int j;
	 templiverange spill=active.get(active.size()-1);
	 if( spill.end>liverange.get(i).end){
		liverange.get(i).regallocated = spill.regallocated;
		liverange.get(i).isallocatedreg = true;
		spill.isallocatedreg=false;
		spilledallocated++;
		spill.stacklocation= spilledallocated;
		active.remove(active.size()-1);
	        active.add(liverange.get(i));	
	 }
	 else{
	      spilledallocated++;
	      liverange.get(i).stacklocation = spilledallocated;
	      liverange.get(i).isallocatedreg = false;
	 } 
 }
 
 
 int linearscan(ArrayList<templiverange> liverange,int size){
    Integer spilled =0;
    ArrayList<String> regpool = new ArrayList<String> ();
    int i,j;
    int R = 10+8-sallocated;
     for(i=sallocated;i<8;i++){
		 regpool.add("s"+i);}
     for(i=0;i<10;i++){
		 regpool.add("t"+i);}
		 
     ArrayList<templiverange> active = new ArrayList<templiverange>();
      Collections.sort(liverange,new SortByStart());
      for(i=0;i<size;i++){
		 expireoldintervals(liverange,i,active,regpool);
		 if(active.size()== R){
			 spilledallocated++;
			 spillatinterval(liverange,i,active,regpool);
		 }
		 else{
			 templiverange t = liverange.get(i);
			 String register = regpool.get(0);
			 regpool.remove(0);
			 t.regallocated=register;
			 t.isallocatedreg=true;
			 active.add(t);
		 }
			 	
		 
	 }
	 //System.out.println("     "+spilledallocated);
	  return spilledallocated;	
   }
   

   void fillallreq(){
      for(int i=0;i<Endpoints.size();i++){
            int arguments= numarguments.get(i);
            ArrayList<templiverange> arraytobepassed = new ArrayList<templiverange>();
            arraytobepassed = Globrange.get(i);
            sallocated=0;
            spilledallocated=0;
            for(int j=0;j<arguments;j++){
                if(j<=3){
                   /*for(templiverange t: tobetraversed){
                       if(t.tempname ==j){
                            t.regallocated = "s"+Integer.toString(j);
                            
                            System.out.println("    Hi");
                            t.isallocatedreg=true;
                       }
                   }*/
                   sallocated++;
                }
                else{
                  /* for(templiverange t: tobetraversed){
                       if(t.tempname ==j){
                            
                            t.stacklocation=spilledallocated;    
                            t.isallocatedreg=false;
                       }
                   }*/
                   spilledallocated++;
                }
            }
            int spiller = linearscan(arraytobepassed,arraytobepassed.size());
            for(int j=0;j<arguments;j++){
                if(j<=3){
                      templiverange t = new templiverange();
                      t.regallocated = "s"+Integer.toString(j);
                      t.isallocatedreg=true;
                      t.tempname = j;
                      arraytobepassed.add(t);
                }
                else{
                      templiverange t = new templiverange();
                      spilledallocated++;
                      t.stacklocation = spilledallocated;
                      t.isallocatedreg=false;
                      t.tempname=j;
                      arraytobepassed.add(t);
                }
            }
            spilledout.put(i,spiller);
            //System.out.println(spilledallocated);
       }
   }
   
   class tobesent{
        String fname;
        int numargs;
        HashMap<Integer,templiverange> tempsig;
        int maxargcalls;
        int stackspilled;
        tobesent(){
             fname="";
             numargs=0;
             tempsig=new HashMap<Integer,templiverange>();
             maxargcalls=0;
             stackspilled =0;
        }
   }
   
   HashMap<String,tobesent> Final = new  HashMap<String,tobesent> ();
   
   void FinalFunc(){
      for(int i=0;i<Endpoints.size();i++){
            tobesent t = new tobesent();
            t.fname = Function_names.get(i);
            t.numargs= numarguments.get(i);
            ArrayList<templiverange> p = new ArrayList<templiverange>(Globrange.get(i));
            for(templiverange k : p){
                t.tempsig.put(k.tempname,k);
            }
            t.stackspilled = spilledout.get(i);
            if(maximumarg.get(i)!=null){
            t.maxargcalls=maximumarg.get(i);}
            Final.put(Function_names.get(i),t);
      }
   
   }
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         Set<String> S = new HashSet<String>();
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            S.add((String)e.nextElement().accept(this,argu));
            _count++;
         }
         return (R)S;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> StmtList()
    * f2 -> "END"
    * f3 -> ( Procedure() )*
    * f4 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      presentfunc=0;
      labeldata = (HashMap<String,Integer>) argu;
      Endpoints.add(labeldata.get("MAIN"));
      Function_names.add("MAIN");
      numarguments.add(0);
      linenum++;
      StmtSignature a = new StmtSignature();
      a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      linenum++;
      StmtSignature b = new StmtSignature();
       b.directnext = 0;
      GlobalTable.put(linenum,b);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      //print();
      livenessanalysis();
      findliveranges();
      sortliveranges();
      fillallreq();
      FinalFunc();
    /*for(int i=1;i<=GlobalTable.size();i++){
             StmtSignature l = new StmtSignature();
             l=GlobalTable.get(i);
            Iterator itr = l.LiveIn.iterator();
             while(itr.hasNext()){
                 System.out.print(itr.next());
             } 
               System.out.print(" ");
             Iterator itr1 = l.LiveOut.iterator();
             while(itr1.hasNext()){
                 System.out.print(itr1.next());
             } 
            System.out.println("");
           // System.out.print(l.directnext);
            //   System.out.print(" ");
             //System.out.print(l.jumpnext);
              // System.out.println("");
       }*/
      
       /*procliverange p =new procliverange(); 
        p=Globalliverange.get(1);
        HashMap<String,templiverange> s = p.totallive;
        Iterator it =s.entrySet().iterator();
        while(it.hasNext()){
            Map.Entry mp = (Map.Entry)it.next();
            System.out.print(mp.getKey());
            templiverange l = new templiverange();
            l = (templiverange)mp.getValue();
            System.out.print("  ");
            System.out.print(l.start);
            System.out.print("  ");
            System.out.print(l.end);
            System.out.println(" ");
         }*/
         
       /* tobesent p = new tobesent();
         p=Final.get("BS_Start");
         HashMap<Integer,templiverange> xx = p.tempsig;
           Iterator it =xx.entrySet().iterator();
	       while(it.hasNext()){
		    Map.Entry mp = (Map.Entry)it.next();
		    System.out.println(mp.getKey());
		   
	       }
         
         
         templiverange i = p.tempsig.get(1);
         
         System.out.print(i.start+"  "+i.end+" "+i.regallocated+"  "+i.tempname+" "+i.stacklocation);
         System.out.println("");*/
         
          //  System.out.print(mp.getValue());
        
       //for(int i=0;i<Endpoints.size();i++){
         // System.out.println(Endpoints.get(i));
       //}
      return (R)Final;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      String x ="a";
      argu = (A)x;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> StmtExp()
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      linenum++;
      presentfunc++;
      StmtSignature a = new StmtSignature();
       a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      String x ="b";
      argu = (A)x;
      String S = (String)n.f0.accept(this, argu);
      Endpoints.add(labeldata.get(S));
      Function_names.add(S);
    
      n.f1.accept(this, argu);
      String S1 = (String)n.f2.accept(this, argu);
        numarguments.add(Integer.parseInt(S1));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      linenum++;
      StmtSignature a = new StmtSignature();
       a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      linenum++;
      StmtSignature a = new StmtSignature();
       a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Temp()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      linenum++;
      n.f0.accept(this, argu);
      StmtSignature a = new StmtSignature();
      String S = (String)n.f1.accept(this, argu);
      a.UseSet.add(S);
      a.directnext = linenum+1;
     
      String x ="b";
      argu=(A)x;
      String jump= (String)n.f2.accept(this, argu);
       Integer p = (Integer)labeldata.get(jump);
      a.jumpnext = p;
       GlobalTable.put(linenum,a);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      linenum++;
      StmtSignature a = new StmtSignature();
       a.directnext = linenum+1;
      n.f0.accept(this, argu);
      String x ="b";
      argu=(A)x;
      String jump = (String)n.f1.accept(this, argu);
       Integer p = (Integer)labeldata.get(jump);
       a.jumpnext=p;
       GlobalTable.put(linenum,a);
     
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Temp()
    * f2 -> IntegerLiteral()
    * f3 -> Temp()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      linenum++;
      String S1 = (String)n.f1.accept(this, argu);
      StmtSignature a = new StmtSignature();
         a.directnext = linenum+1;
      a.UseSet.add(S1);
      n.f2.accept(this, argu);
      String S2 = (String)n.f3.accept(this, argu);
      a.UseSet.add(S2);
        GlobalTable.put(linenum,a);
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Temp()
    * f2 -> Temp()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      linenum++;
      StmtSignature a = new StmtSignature();
      String S1 = (String)n.f1.accept(this, argu);
      String S2 = (String)n.f2.accept(this, argu);
      a.DefSet.add(S1);
      a.UseSet.add(S2);
        a.directnext = linenum+1;
      n.f3.accept(this, argu);
      GlobalTable.put(linenum,a);
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Temp()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      linenum++;
      StmtSignature a = new StmtSignature();
      String S = (String)n.f1.accept(this, argu);
      a.DefSet.add(S);
      argu = (A)a;
      String S1 =(String)n.f2.accept(this, argu);
        if(S1.charAt(0)=='T'&&S1.charAt(01)=='E'&&S1.charAt(2)=='M'&&S1.charAt(3)=='P'){
          a.UseSet.add(S1);
        }
      
      a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      linenum++;
      String S = (String)n.f1.accept(this, argu);
      StmtSignature a = new StmtSignature();
      a.directnext = 0;
      a.UseSet.add(S);
      GlobalTable.put(linenum,a);
      return _ret;
   }

   /**
    * f0 -> Call()
    *       | HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
     String S = (String) n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "BEGIN"
    * f1 -> StmtList()
    * f2 -> "RETURN"
    * f3 -> SimpleExp()
    * f4 -> "END"
    */
   public R visit(StmtExp n, A argu) {
      R _ret=null;
      linenum++;
      StmtSignature a = new StmtSignature();
      a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      linenum++;
      StmtSignature b = new StmtSignature();
      b.directnext = 0;
      n.f2.accept(this, argu);
      String S = (String)n.f3.accept(this, argu);
      if(S.charAt(0)=='T'&&S.charAt(01)=='E'&&S.charAt(2)=='M'&&S.charAt(3)=='P'){
          b.UseSet.add(S);
       }
       GlobalTable.put(linenum,b);
      linenum++;
      StmtSignature c = new StmtSignature();
      c.directnext = 0;
      GlobalTable.put(linenum,c);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    * f2 -> "("
    * f3 -> ( Temp() )*
    * f4 -> ")"
    */
   public R visit(Call n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      StmtSignature a = (StmtSignature) argu;
      String S = (String)n.f1.accept(this, argu);
      a.UseSet.add(S);
      n.f2.accept(this, argu);
      Set<String> P = (Set<String>)n.f3.accept(this, argu);
      if(maximumarg.get(presentfunc)==null){
         maximumarg.put(presentfunc,P.size());
      }
      else{
         int i = maximumarg.get(presentfunc);
         if(i<P.size()){
            maximumarg.put(presentfunc,P.size());
         }
      }
      a.UseSet.addAll(P);
      n.f4.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      StmtSignature a = (StmtSignature)argu;
      a.UseSet.add(S);
      return (R)S;
   }

   /**
    * f0 -> Operator()
    * f1 -> Temp()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String) n.f1.accept(this, argu);
      StmtSignature a = (StmtSignature)argu;
      a.UseSet.add(S);
      String S1 = (String)n.f2.accept(this, argu);
      a.UseSet.add(S1);
      return (R)S1;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Temp()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String x ="b";
      argu=(A)x;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "TEMP"
    * f1 -> IntegerLiteral()
    */
   public R visit(Temp n, A argu) {
      R _ret=null;
      String s1 =(String)n.f0.accept(this, argu);
      String s2 = (String)n.f1.accept(this, argu);
      String S = s1+s2;
      return (R)S;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String s = (String)n.f0.accept(this, argu);
      return (R)s;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      String x = (String)argu;
      if(x=="a"){
       linenum++;
       StmtSignature a = new StmtSignature();
       a.directnext = linenum+1;
      GlobalTable.put(linenum,a);
      }
      return (R)S;
   }

}
