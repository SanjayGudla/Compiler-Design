//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst2<R,A> extends GJDepthFirst<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() )
         return n.node.accept(this,argu);
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> MainClass()
    * f1 -> ( TypeDeclaration() )*
    * f2 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      GlobalTable = (HashMap<String,ClassTable>) argu;
      
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      System.out.println("Program type checked successfully");
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> "public"
    * f4 -> "static"
    * f5 -> "void"
    * f6 -> "main"
    * f7 -> "("
    * f8 -> "String"
    * f9 -> "["
    * f10 -> "]"
    * f11 -> Identifier()
    * f12 -> ")"
    * f13 -> "{"
    * f14 -> PrintStatement()
    * f15 -> "}"
    * f16 -> "}"
    */
   public R visit(MainClass n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String nameofclass = (String)n.f1.accept(this, argu);
      argu=(A)GlobalTable.get(nameofclass);
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      
      n.f6.accept(this, argu);
      MethodTable b = new MethodTable();
      b=(MethodTable)((ClassTable)argu).methods.get("main");
      argu=(A)b;
    		  
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      
      n.f10.accept(this, argu);
      
      
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      n.f15.accept(this, argu);
      n.f16.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ClassDeclaration()
    *       | ClassExtendsDeclaration()
    */
   public R visit(TypeDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "{"
    * f3 -> ( VarDeclaration() )*
    * f4 -> ( MethodDeclaration() )*
    * f5 -> "}"
    */
   public R visit(ClassDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String nameofclass=(String)n.f1.accept(this, argu);
      ClassTable a=GlobalTable.get(nameofclass);
      argu = (A)a;
      
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "class"
    * f1 -> Identifier()
    * f2 -> "extends"
    * f3 -> Identifier()
    * f4 -> "{"
    * f5 -> ( VarDeclaration() )*
    * f6 -> ( MethodDeclaration() )*
    * f7 -> "}"
    */
   public R visit(ClassExtendsDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      
      String nameofclass=(String)n.f1.accept(this, argu);
      
      n.f2.accept(this, argu);
      
      String nameofparentclass=(String)n.f3.accept(this, argu);
      if(GlobalTable.get(nameofparentclass)==null) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      
      ClassTable a = new ClassTable();
      a = GlobalTable.get(nameofclass);
      argu=(A)a;
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    * f2 -> ";"
    */
   public R visit(VarDeclaration n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> AccessType()
    * f1 -> Type()
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( FormalParameterList() )?
    * f5 -> ")"
    * f6 -> "{"
    * f7 -> ( VarDeclaration() )*
    * f8 -> ( Statement() )*
    * f9 -> "return"
    * f10 -> Expression()
    * f11 -> ";"
    * f12 -> "}"
    */
   public R visit(MethodDeclaration n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      
      ClassTable a =new ClassTable();
      a=(ClassTable) argu;
      
 
      String methodname=(String)n.f2.accept(this, argu);
      MethodTable b=new MethodTable();
      b=a.methods.get(methodname);
      String S= b.returntype;
      argu=(A)b;
      
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      n.f8.accept(this, argu);
      n.f9.accept(this, argu);
      String returntypes=(String)n.f10.accept(this, argu);
      if(!S.equals(returntypes)){
           System.out.println("Type error");
           System.exit(0);
      }
      n.f11.accept(this, argu);
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> FormalParameter()
    * f1 -> ( FormalParameterRest() )*
    */
   public R visit(FormalParameterList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Type()
    * f1 -> Identifier()
    */
   public R visit(FormalParameter n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> FormalParameter()
    */
   public R visit(FormalParameterRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ArrayType()
    *       | BooleanType()
    *       | IntegerType()
    *       | Identifier()
    */
   public R visit(Type n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      if(!(S.equals("int")||S.equals("boolean")||S.equals("int[]"))) {
    	  if(GlobalTable.get(S)==null) {
    		  System.out.println("Type error");
    		  System.exit(0);
    	  }
      }
      return (R)S;
   }

   /**
    * f0 -> PublicType()
    *       | PrivateType()
    *       | ProtectedType()
    */
   public R visit(AccessType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "int"
    * f1 -> "["
    * f2 -> "]"
    */
   public R visit(ArrayType n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return (R)"int[]";
   }

   /**
    * f0 -> "boolean"
    */
   public R visit(BooleanType n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "int"
    */
   public R visit(IntegerType n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "public"
    */
   public R visit(PublicType n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "private"
    */
   public R visit(PrivateType n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "protected"
    */
   public R visit(ProtectedType n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> Block()
    *       | AssignmentStatement()
    *       | ArrayAssignmentStatement()
    *       | IfStatement()
    *       | WhileStatement()
    *       | PrintStatement()
    */
   public R visit(Statement n, A argu) {
      R _ret=null;
      _ret=n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "{"
    * f1 -> ( Statement() )*
    * f2 -> "}"
    */
   public R visit(Block n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "="
    * f2 -> Expression()
    * f3 -> ";"
    */
   public R visit(AssignmentStatement n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String expr=(String)n.f2.accept(this, argu);
      
      MethodTable a = new MethodTable();
      a=(MethodTable)argu;
      if(a.methodvalues.params.get(S)!=null) {
    	  S=a.methodvalues.params.get(S);
    	  return (R)S;
      }
      if(a.methodvalues.locals.get(S)!=null) {
    	  S=a.methodvalues.locals.get(S);
    	  return (R)S;
      }
      
      String ClassName=a.ParentClass;
      ClassTable b = new ClassTable();
      b=(ClassTable)GlobalTable.get(ClassName);
      
      while(b!=null) {
    	  if(b.classvar.get(S)!=null) {
    		  S=b.classvar.get(S);
    		  return (R)S;
    	  }
    	  b=GlobalTable.get(b.parent);
      }
      if(!S.equals(expr)) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      n.f3.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> "["
    * f2 -> Expression()
    * f3 -> "]"
    * f4 -> "="
    * f5 -> Expression()
    * f6 -> ";"
    */
   public R visit(ArrayAssignmentStatement n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String S2=(String)n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      
      MethodTable a = new MethodTable();
      a=(MethodTable)argu;
      if(a.methodvalues.params.get(S)!=null) {
    	  S=a.methodvalues.params.get(S);
    	  return (R)S;
      }
      if(a.methodvalues.locals.get(S)!=null) {
    	  S=a.methodvalues.locals.get(S);
    	  return (R)S;
      }
      
      String ClassName=a.ParentClass;
      ClassTable b = new ClassTable();
      b=(ClassTable)GlobalTable.get(ClassName);
      
      while(b!=null) {
    	  if(b.classvar.get(S)!=null) {
    		  S=b.classvar.get(S);
    		  return (R)S;
    	  }
    	  b=GlobalTable.get(b.parent);
      }
      
      if(!(S.equals("int[]")&&S1.equals("int"))&&S2.equals("int")) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      return _ret;
   }

   /**
    * f0 -> IfthenElseStatement()
    *       | IfthenStatement()
    */
   public R visit(IfStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(IfthenStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S=(String)n.f2.accept(this, argu);
      if(!S.equals("boolean")) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "if"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    * f5 -> "else"
    * f6 -> Statement()
    */
   public R visit(IfthenElseStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S =(String)n.f2.accept(this, argu);
      if(!S.equals("boolean")) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      n.f5.accept(this, argu);
      n.f6.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "while"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> Statement()
    */
   public R visit(WhileStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S=(String)n.f2.accept(this, argu);
      if(!S.equals("boolean")) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "System.out.println"
    * f1 -> "("
    * f2 -> Expression()
    * f3 -> ")"
    * f4 -> ";"
    */
   public R visit(PrintStatement n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> OrExpression()
    *       | AndExpression()
    *       | CompareExpression()
    *       | neqExpression()
    *       | PlusExpression()
    *       | MinusExpression()
    *       | TimesExpression()
    *       | DivExpression()
    *       | ArrayLookup()
    *       | ArrayLength()
    *       | MessageSend()
    *       | TernaryExpression()
    *       | PrimaryExpression()
    */
   public R visit(Expression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "&&"
    * f2 -> PrimaryExpression()
    */
   public R visit(AndExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      if(!(S.equals("boolean") && S1.equals("boolean"))){
          System.out.println("Type error");
          System.exit(0);
          }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "||"
    * f2 -> PrimaryExpression()
    */
   public R visit(OrExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      if(!(S.equals("boolean") && S1.equals("boolean"))){
          System.out.println("Type error");
          System.exit(0);
          }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "<="
    * f2 -> PrimaryExpression()
    */
   public R visit(CompareExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      if(!(S.equals("int") && S1.equals("int"))){
          System.out.println("Type error");
          System.exit(0);
       }
        return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "!="
    * f2 -> PrimaryExpression()
    */
   public R visit(neqExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      if(!(S.equals("int") && S1.equals("int"))){
          System.out.println("Type error");
          System.exit(0);
       }
      return (R)"boolean";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "+"
    * f2 -> PrimaryExpression()
    */
   public R visit(PlusExpression n, A argu) {
      R _ret=null;
      String S1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S2=(String)n.f2.accept(this, argu);
      
      if(!(S1.equals("int")) || !(S2.equals("int"))) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "-"
    * f2 -> PrimaryExpression()
    */
   public R visit(MinusExpression n, A argu) {
      R _ret=null;
      String S1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S2=(String)n.f2.accept(this, argu);
      
      if(!(S1.equals("int")) || !(S2.equals("int"))) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "*"
    * f2 -> PrimaryExpression()
    */
   public R visit(TimesExpression n, A argu) {
      R _ret=null;
      String S1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S2=(String)n.f2.accept(this, argu);
	  if(!(S1.equals("int")) || !(S2.equals("int"))) {
		 System.out.println("Type error"); System.exit(0); }
		 
		 return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "/"
    * f2 -> PrimaryExpression()
    */
   public R visit(DivExpression n, A argu) {
      R _ret=null;
      String S1=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S2=(String)n.f2.accept(this, argu);
      System.out.println(S1+" "+S2);
	  if(!(S1.equals("int")) || !(S2.equals("int"))) {
		 System.out.println("Type error"); System.exit(0); }
		 
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "["
    * f2 -> PrimaryExpression()
    * f3 -> "]"
    */
   public R visit(ArrayLookup n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      if(!S.equals("int[]")||!S1.equals("int")) {
    	  System.out.println("Type error"); System.exit(0);  
      }
      n.f3.accept(this, argu);
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> "length"
    */
   public R visit(ArrayLength n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      if(!S.equals("int[]")) {
    	  System.out.println("Type error"); System.exit(0);  
      }
     
      return (R)"int";
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "."
    * f2 -> Identifier()
    * f3 -> "("
    * f4 -> ( ExpressionList() )?
    * f5 -> ")"
    */
   public R visit(MessageSend n, A argu) {
      R _ret=null;
      MethodTable b= new MethodTable();
      b=(MethodTable)argu;
      String S=b.ParentClass;
      ClassTable q = new ClassTable();
      q = GlobalTable.get(S);
      
    		  
      String classname=(String)n.f0.accept(this, argu);
      
      n.f1.accept(this, argu);
      
      String methodname=(String)n.f2.accept(this, argu);
     
      ClassTable m = GlobalTable.get(classname);
      MethodTable o=m.methods.get(methodname);
	
		  if(S!=classname) { 
			  ClassTable a = new ClassTable(); 
			  a =GlobalTable.get(classname); 
			  int flag=0; 
			  while(a!=null) {
		           if(a.methods.get(methodname)!=null) { 
		        	   MethodTable p = new MethodTable();
		               p=a.methods.get(methodname);
		               if(p.Accessspecifier=="private") {
			               System.out.println("Type error"); 
			               System.exit(0); 
		               }
		             flag=1;
		             break;
		           } 
		           else {
		                if(a.parent==null) { 
		                	 break; 
		                 } else { 
		                	 a=GlobalTable.get(a.parent); 
		                	 } 
		                } 
		      }
		      if(flag==0) { System.out.println("Type error"); 
		                     System.exit(0);
		                   } 
		  }
		  else if(S==classname) { 
			  ClassTable a = new ClassTable(); 
			  a =GlobalTable.get(classname); 
			  int flag=0; 
			  while(a!=null) {
		           if(a.methods.get(methodname)!=null) { 
		        	   MethodTable p = new MethodTable();
		               p=a.methods.get(methodname);
		               if(p.Accessspecifier=="private"&&!(p.ParentClass).equals(S)) {
			               System.out.println("Type error"); 
			               System.exit(0); 
		               }
		             flag=1;
		             break;
		           } 
		           else {
		                if(a.parent==null) { 
		                	 break; 
		                 } else { 
		                	 a=GlobalTable.get(a.parent); 
		                	 } 
		                } 
		      }
		      if(flag==0) { System.out.println("Type error"); 
		                     System.exit(0);
		                   } 
		  }
		  
		  
		 
      
      String returntypes = o.returntype;
      n.f3.accept(this, argu);
      LinkedList<String> arguments=(LinkedList<String>)n.f4.accept(this, argu);
		
		 
      n.f5.accept(this, argu);
      return (R)returntypes;
   }

   /**
    * f0 -> PrimaryExpression()
    * f1 -> "?"
    * f2 -> PrimaryExpression()
    * f3 -> ":"
    * f4 -> PrimaryExpression()
    */
   public R visit(TernaryExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      String S1=(String)n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      String S2=(String)n.f4.accept(this, argu);
      if(!S.equals("boolean")||!S1.equals(S2)) {
    	  System.out.println("Type error");
          System.exit(0);
      }
      return (R)S1;
   }

   /**
    * f0 -> Expression()
    * f1 -> ( ExpressionRest() )*
    */
   public R visit(ExpressionList n, A argu) {
      R _ret=null;
      String fp =(String) n.f0.accept(this, argu);
      LinkedList<String> fpr =(LinkedList<String>) n.f1.accept(this, argu);
      
      if (fpr == null)
          fpr = new LinkedList<String>();
      if (fp == null)
          return (R)fpr;
      ((LinkedList<String>) fpr).addFirst(fp);
      
      return (R)fpr;
   }

   /**
    * f0 -> ","
    * f1 -> Expression()
    */
   public R visit(ExpressionRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> IntegerLiteral()
    *       | TrueLiteral()
    *       | FalseLiteral()
    *       | Identifier()
    *       | ThisExpression()
    *       | ArrayAllocationExpression()
    *       | AllocationExpression()
    *       | NotExpression()
    *       | BracketExpression()
    */
   public R visit(PrimaryExpression n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      
      if(S=="int"||S=="boolean"||S=="int[]") {
    	  return (R)S;
      }
      else if(GlobalTable.get(S)!=null) {
    	  return (R)S;
      }
      MethodTable a = new MethodTable();
      a=(MethodTable)argu;
      if(a.methodvalues.params.get(S)!=null) {
    	  S=a.methodvalues.params.get(S);
    	  return (R)S;
      }
      if(a.methodvalues.locals.get(S)!=null) {
    	  S=a.methodvalues.locals.get(S);
    	  return (R)S;
      }
      
      String ClassName=a.ParentClass;
      ClassTable b = new ClassTable();
      b=(ClassTable)GlobalTable.get(ClassName);
      
      while(b!=null) {
    	  if(b.classvar.get(S)!=null) {
    		  S=b.classvar.get(S);
    		  return (R)S;
    	  }
    	  b=GlobalTable.get(b.parent);
      }
      
      return (R)S;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S=(String)"int";
      return (R)S;
   }

   /**
    * f0 -> "true"
    */
   public R visit(TrueLiteral n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> "false"
    */
   public R visit(FalseLiteral n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)"boolean";
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Identifier n, A argu) {
      R _ret=null;
      String S=(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "this"
    */
   public R visit(ThisExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      MethodTable a =(MethodTable)argu;
      String S=a.ParentClass;
      return (R)S;
   }

   /**
    * f0 -> "new"
    * f1 -> "int"
    * f2 -> "["
    * f3 -> Expression()
    * f4 -> "]"
    */
   public R visit(ArrayAllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      String S=(String)n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      if(!S.equals("int")){
          System.out.println("Type error");
          System.exit(0);
       }
        return (R)"int[]";
   }

   /**
    * f0 -> "new"
    * f1 -> Identifier()
    * f2 -> "("
    * f3 -> ")"
    */
   public R visit(AllocationExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String nameofclass=(String)n.f1.accept(this, argu);
      if(GlobalTable.get(nameofclass)==null) {
    	  System.out.println("Type error");
    	  System.exit(0);
      }
      n.f2.accept(this, argu);
      n.f3.accept(this, argu);
      return (R)nameofclass;
   }

   /**
    * f0 -> "!"
    * f1 -> Expression()
    */
   public R visit(NotExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S=(String)n.f1.accept(this, argu);
      if(!S.equals("boolean")){
          System.out.println("Type error");
          System.exit(0);
       }
      return (R)"boolean";
   }

   /**
    * f0 -> "("
    * f1 -> Expression()
    * f2 -> ")"
    */
   public R visit(BracketExpression n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      _ret=n.f1.accept(this, argu);
      n.f2.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Identifier()
    * f1 -> ( IdentifierRest() )*
    */
   public R visit(IdentifierList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> ","
    * f1 -> Identifier()
    */
   public R visit(IdentifierRest n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

}
