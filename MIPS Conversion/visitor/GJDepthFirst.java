//
// Generated by JTB 1.3.2
//

package visitor;
import syntaxtree.*;
import java.util.*;

/**
 * Provides default methods which visit each node in the tree in depth-first
 * order.  Your visitors may extend this class.
 */
public class GJDepthFirst<R,A> implements GJVisitor<R,A> {
   //
   // Auto class visitors--probably don't need to be overridden.
   //
   
   Vector<Integer> v = new Vector<Integer>(2);
   public R visit(NodeList n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeListOptional n, A argu) {
      if ( n.present() ) {
         R _ret=null;
         int _count=0;
         for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
            e.nextElement().accept(this,argu);
            _count++;
         }
         return _ret;
      }
      else
         return null;
   }

   public R visit(NodeOptional n, A argu) {
      if ( n.present() ){
          String L = (String)n.node.accept(this,argu);
          if(L!=null){
              L = L.substring(1,L.length());
              System.out.println(L+":");
           }
         return (R)L;
      }
      else
         return null;
   }

   public R visit(NodeSequence n, A argu) {
      R _ret=null;
      int _count=0;
      for ( Enumeration<Node> e = n.elements(); e.hasMoreElements(); ) {
         e.nextElement().accept(this,argu);
         _count++;
      }
      return _ret;
   }

   public R visit(NodeToken n, A argu) { return (R)n.tokenImage; }

   int procedurecount =0;
   void hallocprint(){
      System.out.println("\n	.text");
      System.out.println("	.globl	_halloc");
      System.out.println("_halloc:");
      System.out.println("	li $v0, 9");
      System.out.println("	syscall");
      System.out.println("	jr $ra \n");
    }
    
    void printprint(){
	      System.out.println("	.text");
	      System.out.println("	.globl	_print");
	      System.out.println("_print:");
	      System.out.println("	li $v0, 1");
	      System.out.println("	syscall");
	      System.out.println("	la $a0, newl");
	      System.out.println("	li $v0, 4");
	      System.out.println("  	syscall");
	      System.out.println("	jr $ra \n");
     } 
     
     void exitretprint(){ 
      System.out.println("\n	.text");
      System.out.println("	.globl	_exitret");
      System.out.println("_exitret:");
      System.out.println("	li $v0, 10");
      System.out.println("	syscall");
     }  
      
     void endprint(){
      System.out.println("	.data");
      System.out.println("	.align   0");    
      System.out.println("newl:	.asciiz   \"\\n\"");
      System.out.println("	.data");
      System.out.println("	.align   0");
      System.out.println("str_er:	.asciiz   \"ERROR: abnormal termination\\n\"");
   }
   
   void errorprint(){
       System.out.println("	li $v0, 4");
       System.out.println("	la $a0, str_er");
       System.out.println("	syscall");
       System.out.println("	li $v0, 10"); 
       System.out.println("	syscall");
   }
   
   void syscallsprint(){
        hallocprint();
        printprint();
        exitretprint();
        endprint();
   }
   
   void beforefunctioncall(int stackcount){
        if(procedurecount==0){
          System.out.println("	move $fp,$sp");
          System.out.println("	subu $sp,$sp,"+stackcount*4);
          System.out.println("	sw $ra, -4($fp)");  
        }
        else{
         System.out.println("		sw $fp, -8($sp)");
         System.out.println("		move $fp,$sp");
         System.out.println("		subu $sp,$sp,"+stackcount*4);
         System.out.println("		sw $ra, -4($fp)");
        }
   }
   
  
   //
   // User-generated visitor methods below
   //

   /**
    * f0 -> "MAIN"
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    * f13 -> ( Procedure() )*
    * f14 -> <EOF>
    */
   public R visit(Goal n, A argu) {
      R _ret=null;
      System.out.println("	.text");
      System.out.println("	.globl	main");
      procedurecount++;
      n.f0.accept(this, argu);
      System.out.println("main:");
      n.f1.accept(this, argu);
      String firstargu = (String)n.f2.accept(this, argu);
      firstargu = firstargu.substring(1,firstargu.length());
      v.add(Integer.parseInt(firstargu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String S = (String) n.f5.accept(this, argu);
      S = S.substring(1,S.length());
      int stackcount = 2+ Integer.parseInt(S);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String S1 = (String)n.f8.accept(this, argu);
      S1 = S1.substring(1,S1.length());
      int callspace = Integer.parseInt(S1);
      v.add(callspace);
      stackcount = (callspace>=4)?(stackcount + (callspace-4)*4):stackcount;
      beforefunctioncall(stackcount);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      v.clear();
      n.f11.accept(this, argu);
      System.out.println("	lw $ra,-4($fp)");
      System.out.println("	addu $sp,$sp,"+stackcount*4);
      System.out.println("	jal _exitret");
      n.f12.accept(this, argu);
      n.f13.accept(this, argu);
      n.f14.accept(this, argu);
      syscallsprint();
      return _ret;
   }

   /**
    * f0 -> ( ( Label() )? Stmt() )*
    */
   public R visit(StmtList n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> Label()
    * f1 -> "["
    * f2 -> IntegerLiteral()
    * f3 -> "]"
    * f4 -> "["
    * f5 -> IntegerLiteral()
    * f6 -> "]"
    * f7 -> "["
    * f8 -> IntegerLiteral()
    * f9 -> "]"
    * f10 -> StmtList()
    * f11 -> "END"
    * f12 -> ( SpillInfo() )?
    */
   public R visit(Procedure n, A argu) {
      R _ret=null;
      procedurecount++;
      String fname = (String)n.f0.accept(this, argu);
      fname = fname.substring(1,fname.length());
      System.out.println("	.text");
      System.out.println("	.globl        "+fname);
      System.out.println(fname+":");
      n.f1.accept(this, argu);
      String firstargu = (String)n.f2.accept(this, argu);
      firstargu = firstargu.substring(1,firstargu.length());
      v.add(Integer.parseInt(firstargu));
      n.f3.accept(this, argu);
      n.f4.accept(this, argu);
      String S = (String)n.f5.accept(this, argu);
       S = S.substring(1,S.length());
      int stackcount = 2+Integer.parseInt(S);
      n.f6.accept(this, argu);
      n.f7.accept(this, argu);
      String S1 = (String)n.f8.accept(this, argu);
       S1 = S1.substring(1,S1.length());
      int callspace = Integer.parseInt(S1);
      stackcount = (callspace>=4)?(stackcount + (callspace-4)*4):stackcount;
      v.add(callspace);
       beforefunctioncall(stackcount);
      n.f9.accept(this, argu);
      n.f10.accept(this, argu);
      v.clear();
      n.f11.accept(this, argu);
      System.out.println("	lw $ra,-4($fp)");
      System.out.println("	lw $fp,-8($fp)");
      System.out.println("	addu $sp,$sp,"+stackcount*4);
      System.out.println("	jr $ra");
      n.f12.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> NoOpStmt()
    *       | ErrorStmt()
    *       | CJumpStmt()
    *       | JumpStmt()
    *       | HStoreStmt()
    *       | HLoadStmt()
    *       | MoveStmt()
    *       | PrintStmt()
    *       | ALoadStmt()
    *       | AStoreStmt()
    *       | PassArgStmt()
    *       | CallStmt()
    */
   public R visit(Stmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> "NOOP"
    */
   public R visit(NoOpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
       System.out.println("	nop");
      return _ret;
   }

   /**
    * f0 -> "ERROR"
    */
   public R visit(ErrorStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      errorprint();
      return _ret;
   }

   /**
    * f0 -> "CJUMP"
    * f1 -> Reg()
    * f2 -> Label()
    */
   public R visit(CJumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      register = register.substring(1,register.length());
      String L = (String)n.f2.accept(this, argu);
      L = L.substring(1,L.length());
      System.out.println("	beqz "+register+" "+L);
      return _ret;
   }

   /**
    * f0 -> "JUMP"
    * f1 -> Label()
    */
   public R visit(JumpStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String L = (String)n.f1.accept(this, argu);
      L = L.substring(1,L.length());
      System.out.println("	b "+L);
      return _ret;
   }

   /**
    * f0 -> "HSTORE"
    * f1 -> Reg()
    * f2 -> IntegerLiteral()
    * f3 -> Reg()
    */
   public R visit(HStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      reg1 = reg1.substring(1,reg1.length());
      String int1 = (String)n.f2.accept(this, argu);
      int1 = int1.substring(1,int1.length());
      String reg2 = (String)n.f3.accept(this, argu);
      reg2 = reg2.substring(1,reg2.length());
       System.out.println("	sw "+reg2+", "+int1+"("+reg1+")");
      return _ret;
   }

   /**
    * f0 -> "HLOAD"
    * f1 -> Reg()
    * f2 -> Reg()
    * f3 -> IntegerLiteral()
    */
   public R visit(HLoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String reg1 = (String)n.f1.accept(this, argu);
      String reg2 = (String)n.f2.accept(this, argu);
      reg1 = reg1.substring(1,reg1.length());
      reg2 = reg2.substring(1,reg2.length());
      String int1 = (String)n.f3.accept(this, argu);
      int1 = int1.substring(1,int1.length());
      System.out.println("	lw "+reg1+", "+int1+"("+reg2+")");
      return _ret;
   }

   /**
    * f0 -> "MOVE"
    * f1 -> Reg()
    * f2 -> Exp()
    */
   public R visit(MoveStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      S=S.substring(1,S.length());
      argu=(A)S;
      String output = (String) n.f2.accept(this, argu);
      System.out.println(output);
      return _ret;
   }

   /**
    * f0 -> "PRINT"
    * f1 -> SimpleExp()
    */
   public R visit(PrintStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      if(S.charAt(0)=='R'){
           S = S.substring(1,S.length());
           System.out.println("	move $a0 ,"+S);
      }
      else if(S.charAt(0)=='L'){
           S = S.substring(1,S.length());
           System.out.println("	li $a0 ,"+S);
      }
      else if(S.charAt(0)=='I'){
           S = S.substring(1,S.length());
           System.out.println("	la $a0 ,"+S);
      }
      System.out.println("	jal _print");
      return _ret;
   }

   /**
    * f0 -> "ALOAD"
    * f1 -> Reg()
    * f2 -> SpilledArg()
    */
   public R visit(ALoadStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String register = (String)n.f1.accept(this, argu);
      register = register.substring(1,register.length());
      String spilledarg = (String)n.f2.accept(this, argu);
      System.out.println("	lw "+register+", "+spilledarg);
      return _ret;
   }

   /**
    * f0 -> "ASTORE"
    * f1 -> SpilledArg()
    * f2 -> Reg()
    */
   public R visit(AStoreStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String spilledarg = (String)n.f1.accept(this, argu);
      String register = (String)n.f2.accept(this, argu);
      register = register.substring(1,register.length());
      System.out.println("	sw "+register+", "+spilledarg);
      return _ret;
   }

   /**
    * f0 -> "PASSARG"
    * f1 -> IntegerLiteral()
    * f2 -> Reg()
    */
   public R visit(PassArgStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String IL = (String)n.f1.accept(this, argu);
      IL = IL.substring(1,IL.length());
      int il= Integer.parseInt(IL);
      String register = (String)n.f2.accept(this, argu);
      register = register.substring(1,register.length());
      System.out.println("	sw "+register+", "+((il-1)*4)+"($sp)");
      return _ret;
   }

   /**
    * f0 -> "CALL"
    * f1 -> SimpleExp()
    */
   public R visit(CallStmt n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      if(S.charAt(0)=='R'){
           S = S.substring(1,S.length());
            System.out.println("	jalr "+S);
      }
      else if(S.charAt(0)=='I'){
           S = S.substring(1,S.length());
           System.out.println("	jal "+S);
      }
     
      return _ret;
   }

   /**
    * f0 -> HAllocate()
    *       | BinOp()
    *       | SimpleExp()
    */
   public R visit(Exp n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      if(n.f0.which==0){
          if(S.charAt(0)=='R'){
              S = S.substring(1,S.length());
	      System.out.println("	move $a0 ,"+S);
	      System.out.println("	jal _halloc");
	      System.out.println("	move "+(String)argu+", $v0");
          }
          else  if(S.charAt(0)=='L'){
              S = S.substring(1,S.length());
	      System.out.println("	li $a0 ,"+S);
	      System.out.println("	jal _halloc");
	      System.out.println("	move "+(String)argu+", $v0");
          }
          return (R)"";
      }
      if(S==null){
          return (R)"";
      }
      String S1 = (String)argu;
      String output="";
      if(S.charAt(0)=='R'){
           S = S.substring(1,S.length());
           output = ("		move " +S1+" ,"+S);
      }
      else if(S.charAt(0)=='L'){
           S = S.substring(1,S.length());
           output=("		li " +S1+" ,"+S);
      }
      else if(S.charAt(0)=='I'){
           S = S.substring(1,S.length());
           output=("		la " +S1+", "+S);
      }
     
      return (R)output;
   }

   /**
    * f0 -> "HALLOCATE"
    * f1 -> SimpleExp()
    */
   public R visit(HAllocate n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> Operator()
    * f1 -> Reg()
    * f2 -> SimpleExp()
    */
   public R visit(BinOp n, A argu) {
      R _ret=null;
      String operator = (String)n.f0.accept(this, argu);
      String operand1 = (String)n.f1.accept(this, argu);
      operand1 = operand1.substring(1,operand1.length());
      String operand2 = (String)n.f2.accept(this, argu);
      if(operand2.charAt(0)=='R'){
             operand2 = operand2.substring(1,operand2.length());
             System.out.println("	"+operator+" "+(String)argu+", "+operand1+", "+operand2);
      }
      else if(operand2.charAt(0)=='L'){
             operand2 = operand2.substring(1,operand2.length());
             if(operator=="add"){
                  operator = "addi";
             }
             System.out.println("	"+operator+" "+(String)argu+", "+operand1+", "+operand2);
      }
      return _ret;
   }

   /**
    * f0 -> "LE"
    *       | "NE"
    *       | "PLUS"
    *       | "MINUS"
    *       | "TIMES"
    *       | "DIV"
    */
   public R visit(Operator n, A argu) {
      R _ret=null;
      String s = (String)n.f0.accept(this, argu);
      if(s=="LE"){
          s="sle";
      }
      else if(s=="NE"){
          s="sne";
      }
      else if(s=="PLUS"){
          s="add";
      }
      else if(s=="MINUS"){
          s="sub";
      }
      else if(s=="TIMES"){
          s="mul";
      }
      else if(s=="DIV"){
          s="div";
      }
      return (R)s;
   }

   String calcindex(int num){
      int p = v.get(0);
      int q = v.get(1);
      int temp=0;
      temp=p-4;
      if(p>4&&num<temp){
           return (" "+(num*4)+"($fp) ");
      }
      if(temp<0){
      temp=0;
      }
      num = (q>4)?(((num-temp)+q-4)):((num-temp));      
      return (" "+num*4+"($sp) ");
   
   }
   /**
    * f0 -> "SPILLEDARG"
    * f1 -> IntegerLiteral()
    */
   public R visit(SpilledArg n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      String S = (String)n.f1.accept(this, argu);
      S = S.substring(1,S.length());
      String output = (String)calcindex(Integer.parseInt(S));
       return (R)output;
   }

   /**
    * f0 -> Reg()
    *       | IntegerLiteral()
    *       | Label()
    */
   public R visit(SimpleExp n, A argu) {
      R _ret=null;
      String S = (String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "a0"
    *       | "a1"
    *       | "a2"
    *       | "a3"
    *       | "t0"
    *       | "t1"
    *       | "t2"
    *       | "t3"
    *       | "t4"
    *       | "t5"
    *       | "t6"
    *       | "t7"
    *       | "s0"
    *       | "s1"
    *       | "s2"
    *       | "s3"
    *       | "s4"
    *       | "s5"
    *       | "s6"
    *       | "s7"
    *       | "t8"
    *       | "t9"
    *       | "v0"
    *       | "v1"
    */
   public R visit(Reg n, A argu) {
      R _ret=null;
      String S = "R$"+(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> <INTEGER_LITERAL>
    */
   public R visit(IntegerLiteral n, A argu) {
      R _ret=null;
      String S = "L"+(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> <IDENTIFIER>
    */
   public R visit(Label n, A argu) {
      R _ret=null;
      String S = "I"+(String)n.f0.accept(this, argu);
      return (R)S;
   }

   /**
    * f0 -> "//"
    * f1 -> SpillStatus()
    */
   public R visit(SpillInfo n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      n.f1.accept(this, argu);
      return _ret;
   }

   /**
    * f0 -> <SPILLED>
    *       | <NOTSPILLED>
    */
   public R visit(SpillStatus n, A argu) {
      R _ret=null;
      n.f0.accept(this, argu);
      return _ret;
   }

}
